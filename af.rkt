#lang racket
[(equal? p-name "Rei")
 (if (and (check-sum i 1) (check-sum j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (+ i 1) (+ j 1))))))))
            (board-set-background (+ i 1) (+ j 1) green-bm) 0)
           (if (and (check-sum i 1) (check-sub j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (+ i 1) (- j 1))))))))
            (board-set-background (+ i 1) (- j 1) green-bm) 0)
           (if (and (check-sub i 1) (check-sum j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (- i 1) (+ j 1))))))))
            (board-set-background (- i 1) (+ j 1) green-bm) 0)
           (if (and (check-sub i 1) (check-sub j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (- i 1) (- j 1))))))))
            (board-set-background (- i 1) (- j 1) green-bm) 0)
           (if (and (check-sum i 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (+ i 1) j)))))))
               (board-set-background (+ i 1) j green-bm) 0)
           (if (and (check-sum j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector i (+ j 1))))))))
            (board-set-background i (+ j 1) green-bm) 0)
           (if (and (check-sub i 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (- i 1) j)))))))
               (board-set-background (- i 1) j green-bm) 0)
           (if (and (check-sub j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector i (- j 1))))))))
               (board-set-background i (- j 1) green-bm) 0)]
[(equal? p-name "Cavalo")
           (if (and (check-sum i 1) (check-sum j 2) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (+ i 1) (+ j 2))))))))
            (board-set-background (+ i 1) (+ j 2) green-bm) 0)
           (if (and (check-sum i 1) (check-sub j 2) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (+ i 1) (- j 2))))))))
            (board-set-background (+ i 1) (- j 2) green-bm) 0)
           (if (and (check-sum i 2) (check-sum j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (+ i 2) (+ j 1))))))))
            (board-set-background (+ i 2) (+ j 1) green-bm) 0)
           (if (and (check-sum i 2) (check-sub j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (+ i 2) (- j 1))))))))
            (board-set-background (+ i 2) (- j 1) green-bm) 0)
           (if (and (check-sub i 1) (check-sum j 2) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (- i 1) (+ j 2))))))))
            (board-set-background (- i 1) (+ j 2) green-bm) 0)
           (if (and (check-sub i 1) (check-sub j 2) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (- i 1) (- j 2))))))))
            (board-set-background (- i 1) (- j 2) green-bm) 0)
           (if (and (check-sub i 2) (check-sum j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (- i 2) (+ j 1))))))))
            (board-set-background (- i 2) (+ j 1) green-bm) 0)
           (if (and (check-sub i 2) (check-sub j 1) (not (equal? p-color (piece-color (position-piece (array-ref positions (vector (- i 2) (- j 1))))))))
            (board-set-background (- i 2) (- j 1) green-bm) 0)]
    [(equal? p-name "Torre")
     (define count1 i)
     (while (and (check-sum count1 1))
            (set! count1 (+ count1 1))
            (define a-pos (array-ref positions (vector count1 j)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background count1 j green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background count1 j green-bm)])
            (break))
     (define count2 i)
     (while (and (check-sub count2 1))
            (set! count2 (- count2 1))
            (define a-pos (array-ref positions (vector count2 j)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background count2 j green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background count2 j green-bm)])
            (break))
     (define count3 j)
     (while (and (check-sum count3 1))
            (set! count3 (+ count3 1))
            (define a-pos (array-ref positions (vector i count3)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i count3 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i count3 green-bm)])
            (break))
     (define count4 j)
     (while (and (check-sub count4 1))
            (set! count4 (- count4 1))
            (define a-pos (array-ref positions (vector i count4)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i count4 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i count4 green-bm)])
            (break))
     ]
    [(equal? p-name "Bispo")
     (define i1 i)
     (define j1 j)
     (while (and (check-sum i1 1) (check-sum j1 1))
            (set! i1 (+ i1 1))
            (set! j1 (+ j1 1))
            (define a-pos (array-ref positions (vector i1 j1)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i1 j1 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i1 j1 green-bm)])
            (break))
     (define i2 i)
     (define j2 j)
     (while (and (check-sum i2 1) (check-sub j2 1))
            (set! i2 (+ i2 1))
            (set! j2 (- j2 1))
            (define a-pos (array-ref positions (vector i2 j2)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i2 j2 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i2 j2 green-bm)])
            (break))
     (define i3 i)
     (define j3 j)
     (while (and (check-sub i3 1) (check-sum j3 1))
            (set! i3 (- i3 1))
            (set! j3 (+ j3 1))
            (define a-pos (array-ref positions (vector i3 j3)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i3 j3 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i3 j3 green-bm)])
            (break))
     (define i4 i)
     (define j4 j)
     (while (and (check-sub i4 1) (check-sub j4 1))
            (set! i4 (- i4 1))
            (set! j4 (- j4 1))
            (define a-pos (array-ref positions (vector i4 j4)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i4 j4 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i4 j4 green-bm)])
            (break))]
    [(equal? p-name "Rainha")
     (define count1 i)
     (while (and (check-sum count1 1))
            (set! count1 (+ count1 1))
            (define a-pos (array-ref positions (vector count1 j)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background count1 j green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background count1 j green-bm)])
            (break))
     (define count2 i)
     (while (and (check-sub count2 1))
            (set! count2 (- count2 1))
            (define a-pos (array-ref positions (vector count2 j)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background count2 j green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background count2 j green-bm)])
            (break))
     (define count3 j)
     (while (and (check-sum count3 1))
            (set! count3 (+ count3 1))
            (define a-pos (array-ref positions (vector i count3)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i count3 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i count3 green-bm)])
            (break))
     (define count4 j)
     (while (and (check-sub count4 1))
            (set! count4 (- count4 1))
            (define a-pos (array-ref positions (vector i count4)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i count4 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i count4 green-bm)])
            (break))
     (define i1 i)
     (define j1 j)
     (while (and (check-sum i1 1) (check-sum j1 1))
            (set! i1 (+ i1 1))
            (set! j1 (+ j1 1))
            (define a-pos (array-ref positions (vector i1 j1)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i1 j1 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i1 j1 green-bm)])
            (break))
     (define i2 i)
     (define j2 j)
     (while (and (check-sum i2 1) (check-sub j2 1))
            (set! i2 (+ i2 1))
            (set! j2 (- j2 1))
            (define a-pos (array-ref positions (vector i2 j2)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i2 j2 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i2 j2 green-bm)])
            (break))
     (define i3 i)
     (define j3 j)
     (while (and (check-sub i3 1) (check-sum j3 1))
            (set! i3 (- i3 1))
            (set! j3 (+ j3 1))
            (define a-pos (array-ref positions (vector i3 j3)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i3 j3 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i3 j3 green-bm)])
            (break))
     (define i4 i)
     (define j4 j)
     (while (and (check-sub i4 1) (check-sub j4 1))
            (set! i4 (- i4 1))
            (set! j4 (- j4 1))
            (define a-pos (array-ref positions (vector i4 j4)))
            (cond
              [(equal? empty (position-piece a-pos))
               (board-set-background i4 j4 green-bm)
               (continue)])
            (cond
              [(not (equal? p-color (piece-color (position-piece a-pos))))
               (board-set-background i4 j4 green-bm)])
            (break))]